import java.io.Writer;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.safari.SafariDriver;

import com.google.j2objc.annotations.ReflectionSupport.Level;

public class Function {

	static WebDriver driver;
	static Writer report;
	static Properties p = new Properties();
	static String url;
	static String browser;

	static void getWebDriver(String browser) {
//		Logger.getLogger("").setLevel(Level.OFF);
		String driverPath = "";

		if (browser.equalsIgnoreCase("firefox")) {
			if (System.getProperty("os.name").toUpperCase().contains("MAC"))
				driverPath = "./geckodriver";
			else if (System.getProperty("os.name").toUpperCase().contains("Windows"))
				driverPath = "./geckodriver";
			else
				throw new IllegalArgumentException("Unknown OS");
			System.setProperty("webdriver.gecko.driver", driverPath);
			driver = new FirefoxDriver();
			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
		} else if (browser.equalsIgnoreCase("chrome")) {
			if (System.getProperty("os.name").toUpperCase().contains("Mac OS X"))
				driverPath = "chromedriver";
			else if (System.getProperty("os.name").toUpperCase().contains("Windows"))
				driverPath = "chromedriver.exe";
			else
				throw new IllegalArgumentException("Unknown OS");
			System.setProperty("webdriver.chrome.driver", driverPath);
			System.setProperty("webdriver.chrome.driver", driverPath);
			System.setProperty("webdriver.chrome.silentOutput", "true");
			ChromeOptions option = new ChromeOptions();
			option.addArguments("disable-infobars");
			option.addArguments("--disable-notifications");
			if (System.getProperty("os.name").toUpperCase().contains("Mac OS X"))
				option.addArguments("-start-fullscreen");
			else if (System.getProperty("os.name").toUpperCase().contains("Windows"))
				option.addArguments("--start-maximized");
			else
				throw new IllegalArgumentException("Uknown OS");
			driver = new ChromeDriver(option);
			driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
		} else if (browser.equalsIgnoreCase("safari")) {
			if (!System.getProperty("os.name").toUpperCase().contains("Mac OS X")) {
				throw new IllegalArgumentException("Safari is available only on Mac");
			}
			driver = new SafariDriver();
			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
		}
	}

	static void open(String browser, String url) {
		getWebDriver(browser);
		driver.get(url);
	}

	static boolean isElementPresent(By by) {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		if (!driver.findElements(by).isEmpty())
			return true;
		else
			return false;
	}

	static String getSize(By by) {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		if (!driver.findElements(by).isEmpty() && driver.findElement(by).isDisplayed())
			// return driver.findElement(by).getRect().getDimension()
			return driver.findElement(by).getSize().toString().replace(", ", "x");
		else
			return "null";
	}

}
